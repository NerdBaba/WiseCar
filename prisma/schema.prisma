// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    phone         String?
    license       String?
    role          UserRole  @default(USER)
    accounts      Account[]
    sessions      Session[]
    bookings      Booking[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Car {
    id            String     @id @default(cuid())
    name          String
    model         String
    brand         String
    type          String
    seats         Int
    transmission  String
    fuelType      String
    pricePerHour  Float
    pricePerDay   Float
    images        String[]
    status        CarStatus  @default(AVAILABLE)
    locationId    String?
    location      Location?  @relation(fields: [locationId], references: [id])
    bookings      Booking[]
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
}

model Booking {
    id            String        @id @default(cuid())
    car           Car           @relation(fields: [carId], references: [id])
    carId         String
    user          User          @relation(fields: [userId], references: [id])
    userId        String
    startTime     DateTime
    endTime       DateTime
    totalPrice    Float
    status        BookingStatus @default(PENDING)
    paymentStatus PaymentStatus @default(PENDING)
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
}

model Location {
    id          String   @id @default(cuid())
    address     String
    city        String
    state       String
    country     String
    coordinates Json     // {lat: number, lng: number}
    cars        Car[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

enum UserRole {
    USER
    ADMIN
}

enum CarStatus {
    AVAILABLE
    RENTED
    MAINTENANCE
}

enum BookingStatus {
    PENDING
    CONFIRMED
    COMPLETED
    CANCELLED
}

enum PaymentStatus {
    PENDING
    COMPLETED
    FAILED
    REFUNDED
}
